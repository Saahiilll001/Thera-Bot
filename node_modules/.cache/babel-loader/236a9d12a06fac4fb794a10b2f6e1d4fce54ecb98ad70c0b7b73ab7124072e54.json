{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sahil patel\\\\Downloads\\\\SEM-7 APP\\\\THERA-BOT-v.0.0.1-main\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport \"./normal.css\";\nimport userAvatar from \"./square.png\";\nimport therabotAvatar from \"./thera-bot-avatar.png\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport Speech from \"speak-tts\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State adding for input and chat log\n  const [input, setInput] = useState(\"\");\n  const [chatLog, setChatLog] = useState([{\n    user: \"THERA-BOT\",\n    message: \"Hey, I am THERA-BOT, an AI based Mental Health Assistant,\\nHow can I help you today?\"\n  }, {\n    user: \"me\",\n    message: \"I am feeling low today\"\n  }]);\n\n  // Check if speech recognition is supported\n  const isSpeechRecognitionSupported = SpeechRecognition.browserSupportsSpeechRecognition();\n  const {\n    transcript,\n    resetTranscript\n  } = useSpeechRecognition();\n  const speech = new Speech();\n\n  // Clearing Chats\n  const clearChats = () => {\n    setChatLog([]);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    console.log(\"submit\");\n    if (input) {\n      sendMessage(input);\n      // setInput(\"\");\n    }\n\n    let chatLogNew = [...chatLog, {\n      user: \"me\",\n      message: `${input}`\n    }];\n    await setInput(\"\");\n    setChatLog(chatLogNew);\n\n    // Fetch response to the api combining the chat log array of messages and sending it as a message to localhost:3000 as a post\n    const messages = chatLogNew.map(message => message.message).join(\"\\n\");\n    const response = await fetch(\"http://localhost:3001/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message: messages\n      })\n    });\n    const data = await response.json();\n    setChatLog([...chatLogNew, {\n      user: \"THERA-BOT\",\n      message: `${data.message}`\n    }]);\n    console.log(data.message);\n  };\n  const sendMessage = message => {\n    const newMessage = {\n      user: \"User\",\n      message: message\n    };\n    setChatLog(prevChatLog => [...prevChatLog, newMessage]);\n  };\n  const handleSpeechToText = () => {\n    if (isSpeechRecognitionSupported) {\n      SpeechRecognition.startListening({\n        continuous: true\n      });\n    } else {\n      console.log(\"Speech recognition is not supported in this browser.\");\n    }\n  };\n  const handleTextToSpeech = text => {\n    speech.speak({\n      text: text\n    }).then(() => {\n      console.log(\"Text-to-speech success\");\n    }).catch(error => {\n      console.error(\"Error during text-to-speech:\", error);\n    });\n  };\n  React.useEffect(() => {\n    speech.init().then(data => {\n      console.log(\"Speech initialization successful\", data);\n    });\n  }, []);\n  React.useEffect(() => {\n    if (transcript) {\n      setInput(transcript);\n      resetTranscript();\n    }\n  }, [transcript]);\n  const handleIncomingMessage = message => {\n    const newMessage = {\n      user: \"THERA-BOT\",\n      message: message\n    };\n    setChatLog(prevChatLog => [...prevChatLog, newMessage]);\n    handleTextToSpeech(message);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidemenu\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"side-menu-button\",\n        onClick: clearChats,\n        children: \"New Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"chatbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-log\",\n        children: chatLog.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          message: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-holder\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"mic-button\",\n            onClick: handleSpeechToText,\n            children: \"\\uD83C\\uDFA4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: input,\n            onChange: e => setInput(e.target.value),\n            className: \"chat-input-textarea\",\n            placeholder: \"Type your message...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"send-button\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"uSdwPx3PHiuHgEKt+oYPGojnhPA=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = App;\nexport default App;\nconst ChatMessage = _ref => {\n  let {\n    message\n  } = _ref;\n  const isOutgoingMessage = message.user === \"THERA-BOT\";\n\n  // const speech = new Speech();\n\n  // const handleTextToSpeech = (text) => {\n  //   speech\n  //     .speak({\n  //       text: text,\n  //     })\n  //     .then(() => {\n  //       console.log(\"Text-to-speech success\");\n  //     })\n  //     .catch((error) => {\n  //       console.error(\"Error during text-to-speech:\", error);\n  //     });\n  // };\n\n  // const handleIncomingMessage = (message) => {\n  //   const newMessage = {\n  //     user: \"THERA-BOT\",\n  //     message: message,\n  //   };\n  //   setChatLog((prevChatLog) => [...prevChatLog, newMessage]);\n  //   handleTextToSpeech(message);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-message ${isOutgoingMessage ? \"outgoing\" : \"incoming\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"avatar\",\n      children: isOutgoingMessage ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: therabotAvatar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        src: userAvatar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message ${isOutgoingMessage ? \"outgoing\" : \"incoming\"}`,\n      children: message.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ChatMessage;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"ChatMessage\");","map":{"version":3,"names":["userAvatar","therabotAvatar","SpeechRecognition","useSpeechRecognition","Speech","React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","input","setInput","chatLog","setChatLog","user","message","isSpeechRecognitionSupported","browserSupportsSpeechRecognition","transcript","resetTranscript","speech","clearChats","handleSubmit","e","preventDefault","console","log","sendMessage","chatLogNew","messages","map","join","response","fetch","method","headers","body","JSON","stringify","data","json","newMessage","prevChatLog","handleSpeechToText","startListening","continuous","handleTextToSpeech","text","speak","then","catch","error","init","handleIncomingMessage","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","index","ChatMessage","onSubmit","type","value","onChange","target","placeholder","_c","_ref","isOutgoingMessage","src","_c2","$RefreshReg$"],"sources":["C:/Users/sahil patel/Downloads/SEM-7 APP/THERA-BOT-v.0.0.1-main/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport \"./normal.css\";\nimport userAvatar from \"./square.png\";\nimport therabotAvatar from \"./thera-bot-avatar.png\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\nimport Speech from \"speak-tts\";\nimport React from \"react\";\n\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  // State adding for input and chat log\n  const [input, setInput] = useState(\"\");\n  const [chatLog, setChatLog] = useState([\n    {\n      user: \"THERA-BOT\",\n      message:\n        \"Hey, I am THERA-BOT, an AI based Mental Health Assistant,\\nHow can I help you today?\",\n    },\n    {\n      user: \"me\",\n      message: \"I am feeling low today\",\n    },\n  ]);\n\n  // Check if speech recognition is supported\n  const isSpeechRecognitionSupported =\n    SpeechRecognition.browserSupportsSpeechRecognition();\n\n  const { transcript, resetTranscript } = useSpeechRecognition();\n  const speech = new Speech();\n\n  // Clearing Chats\n  const clearChats = () => {\n    setChatLog([]);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    console.log(\"submit\");\n    if (input) {\n      sendMessage(input);\n      // setInput(\"\");\n    }\n    let chatLogNew = [...chatLog, { user: \"me\", message: `${input}` }];\n    await setInput(\"\");\n    setChatLog(chatLogNew);\n\n    // Fetch response to the api combining the chat log array of messages and sending it as a message to localhost:3000 as a post\n    const messages = chatLogNew.map((message) => message.message).join(\"\\n\");\n    const response = await fetch(\"http://localhost:3001/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        message: messages,\n      }),\n    });\n\n    const data = await response.json();\n    setChatLog([\n      ...chatLogNew,\n      {\n        user: \"THERA-BOT\",\n        message: `${data.message}`,\n      },\n    ]);\n    console.log(data.message);\n  };\n\n  const sendMessage = (message) => {\n    const newMessage = {\n      user: \"User\",\n      message: message,\n    };\n    setChatLog((prevChatLog) => [...prevChatLog, newMessage]);\n  };\n\n  const handleSpeechToText = () => {\n    if (isSpeechRecognitionSupported) {\n      SpeechRecognition.startListening({ continuous: true });\n    } else {\n      console.log(\"Speech recognition is not supported in this browser.\");\n    }\n  };\n\n  const handleTextToSpeech = (text) => {\n    speech\n      .speak({\n        text: text,\n      })\n      .then(() => {\n        console.log(\"Text-to-speech success\");\n      })\n      .catch((error) => {\n        console.error(\"Error during text-to-speech:\", error);\n      });\n  };\n\n  React.useEffect(() => {\n    speech.init().then((data) => {\n      console.log(\"Speech initialization successful\", data);\n    });\n  }, []);\n\n  React.useEffect(() => {\n    if (transcript) {\n      setInput(transcript);\n      resetTranscript();\n    }\n  }, [transcript]);\n\n  const handleIncomingMessage = (message) => {\n    const newMessage = {\n      user: \"THERA-BOT\",\n      message: message,\n    };\n    setChatLog((prevChatLog) => [...prevChatLog, newMessage]);\n    handleTextToSpeech(message);\n  };\n\n  return (\n    <div className=\"App\">\n      <aside className=\"sidemenu\">\n        <div className=\"side-menu-button\" onClick={clearChats}>\n          {/* <span>+</span> */}\n          New Chat\n        </div>\n      </aside>\n      <section className=\"chatbox\">\n        <div className=\"chat-log\">\n          {chatLog.map((message, index) => (\n            <ChatMessage key={index} message={message} />\n          ))}\n          {/* {handleIncomingMessage(chatLog.map((message) => message))} */}\n        </div>\n\n        <div className=\"chat-input-holder\">\n          <form onSubmit={handleSubmit}>\n            <button\n              type=\"button\"\n              className=\"mic-button\"\n              onClick={handleSpeechToText}\n            >\n              🎤\n            </button>\n            <input\n              type=\"text\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              className=\"chat-input-textarea\"\n              placeholder=\"Type your message...\"\n            />\n            <button type=\"submit\" className=\"send-button\">\n              Send\n            </button>\n          </form>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n\nconst ChatMessage = ({ message }) => {\n  const isOutgoingMessage = message.user === \"THERA-BOT\";\n\n  // const speech = new Speech();\n\n  // const handleTextToSpeech = (text) => {\n  //   speech\n  //     .speak({\n  //       text: text,\n  //     })\n  //     .then(() => {\n  //       console.log(\"Text-to-speech success\");\n  //     })\n  //     .catch((error) => {\n  //       console.error(\"Error during text-to-speech:\", error);\n  //     });\n  // };\n\n  // const handleIncomingMessage = (message) => {\n  //   const newMessage = {\n  //     user: \"THERA-BOT\",\n  //     message: message,\n  //   };\n  //   setChatLog((prevChatLog) => [...prevChatLog, newMessage]);\n  //   handleTextToSpeech(message);\n  // };\n\n  return (\n    <div\n      className={`chat-message ${isOutgoingMessage ? \"outgoing\" : \"incoming\"}`}\n    >\n      <div className=\"avatar\">\n        {isOutgoingMessage ? (\n          <img src={therabotAvatar} />\n        ) : (\n          <img src={userAvatar} />\n        )}\n      </div>\n      <div className={`message ${isOutgoingMessage ? \"outgoing\" : \"incoming\"}`}>\n        {message.message}\n      </div>\n      {/* {handleIncomingMessage(message.message)} */}\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}